%functions to operate on a row vector as if it was a queue
classdef Tree
    properties
        value
        left_tree
        right_tree
    end
    methods
        function obj = createNullTree(plhldr)
            null_tree = Tree;
            null_tree.value = [];
            null_tree.left_tree = [];
            null_tree.right_tree = [];
            obj = null_tree;
        end
        function obj = createNewTree(plhldr, elt)
            new_tree = Tree;
            new_tree.value = elt;
            new_tree.left_tree = createNullTree(plhldr);
            new_tree.right_tree = createNullTree(plhldr);
            obj = new_tree; 
        end
        function result = includes(obj, elt)
            if (isempty(obj.value))
                check = false;
            elseif (obj.value == elt)
                check = true;
            else 
                if (elt < obj.value)
                    check = includes(obj.left_tree, elt);
                elseif (elt > obj.value)
                    check = includes(obj.right_tree, elt);
                end
            end
            result = check;
        end
        function obj = combine(objA, objB)
            if (~isempty(objB.value))
                objA = add(objA, objB.value);
                objA = combine(objA, objB.left_tree);
                objA = combine(objA, objB.right_tree);
            end
            obj = objA;
        end
        function obj = add(obj, elt)
            if (isempty(obj.value))
                obj = createNewTree(obj, elt);
            elseif (elt < obj.value)
                obj.left_tree = add(obj.left_tree, elt);
            elseif (elt > obj.value)
                obj.right_tree = add(obj.right_tree, elt);
            end
        end
        function elt = get_first(obj)
            
    end
end